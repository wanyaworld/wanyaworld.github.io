<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-12-05T01:28:53+09:00</updated><id>/feed.xml</id><title type="html">Jangwoong Kim’s Blog</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Futex in Kernel Implementation (1) - futex_wait</title><link href="/2021/12/04/futex-kernel.html" rel="alternate" type="text/html" title="Futex in Kernel Implementation (1) - futex_wait" /><published>2021-12-04T00:00:00+09:00</published><updated>2021-12-04T00:00:00+09:00</updated><id>/2021/12/04/futex-kernel</id><content type="html" xml:base="/2021/12/04/futex-kernel.html">&lt;h2 id=&quot;futex-in-kernel-implementation-1---futex_wait&quot;&gt;Futex in Kernel Implementation (1) - futex_wait&lt;/h2&gt;
&lt;p&gt;This article demonstrates kernel implementation of futex.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;lt;kernel/futex/syscalls.c&amp;gt;&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SYSCALL_DEFINE6(futex, u32 __user *, uaddr, int, op, u32, val,
		const struct __kernel_timespec __user *, utime,
		u32 __user *, uaddr2, u32, val3)
{
	int ret, cmd = op &amp;amp; FUTEX_CMD_MASK;
	ktime_t t, *tp = NULL;
	struct timespec64 ts;
    
	if (utime &amp;amp;&amp;amp; futex_cmd_has_timeout(cmd)) {
		if (unlikely(should_fail_futex(!(op &amp;amp; FUTEX_PRIVATE_FLAG))))
			return -EFAULT;
		if (get_timespec64(&amp;amp;ts, utime))
			return -EFAULT;
		ret = futex_init_timeout(cmd, op, &amp;amp;ts, &amp;amp;t);
		if (ret)
			return ret;
		tp = &amp;amp;t;
	}

	return do_futex(uaddr, op, val, tp, uaddr2, (unsigned long)utime, val3);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Until 5.15 kernel, futex has been implemented in &lt;em&gt;kernel/futex.c&lt;/em&gt; file. However, from 5.16 kernel, futex has dedicated directory (&lt;em&gt;kernel/futex&lt;/em&gt;), and it’s implementation is separated into multiple file.&lt;/p&gt;

&lt;p&gt;The entry point of futex syscall is defined at &lt;em&gt;syscalls.c&lt;/em&gt;. All of futex operation is multiflex via &lt;em&gt;do_futex&lt;/em&gt;() function, although the community is considering defining syscall for each operation &lt;a href=&quot;https://linuxplumbersconf.org/event/11/contributions/1058/attachments/788/1481/futex_lpc2021.pdf&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;lt;kernel/futex/syscalls.c&amp;gt;&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;long do_futex(u32 __user *uaddr, int op, u32 val, ktime_t *timeout,
		u32 __user *uaddr2, u32 val2, u32 val3)
{ ...
	switch (cmd) {
	case FUTEX_WAIT:
		val3 = FUTEX_BITSET_MATCH_ANY;
		fallthrough;
	case FUTEX_WAIT_BITSET:
		return futex_wait(uaddr, flags, val, timeout, val3);
	case FUTEX_WAKE:
		val3 = FUTEX_BITSET_MATCH_ANY;
		fallthrough;
	case FUTEX_WAKE_BITSET:
		return futex_wake(uaddr, flags, val, val3);
	case FUTEX_REQUEUE:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In &lt;em&gt;do_futex&lt;/em&gt;(), the request is, with appropriate flag being set, routed to corresponding function. This article only deals with futex_wait and futex_wake.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;lt;kernel/futex/waitwake.c&amp;gt;&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int futex_wait(u32 __user *uaddr, unsigned int flags, u32 val, ktime_t *abs_time, u32 bitset)
{
	struct hrtimer_sleeper timeout, *to;
	struct restart_block *restart;
	struct futex_hash_bucket *hb;
	struct futex_q q = futex_q_init;
	int ret;

	if (!bitset)
		return -EINVAL;
	q.bitset = bitset;

	to = futex_setup_timer(abs_time, &amp;amp;timeout, flags,
			       current-&amp;gt;timer_slack_ns);
retry:
	ret = futex_wait_setup(uaddr, val, flags, &amp;amp;q, &amp;amp;hb);
	if (ret)
		goto out;

	futex_wait_queue(hb, &amp;amp;q, to);

	ret = 0;
	if (!futex_unqueue(&amp;amp;q))
		goto out;
	ret = -ETIMEDOUT;
	if (to &amp;amp;&amp;amp; !to-&amp;gt;task)
		goto out;

	if (!signal_pending(current))
		goto retry;

	ret = -ERESTARTSYS;
	if (!abs_time)
		goto out;

	restart = &amp;amp;current-&amp;gt;restart_block;
	restart-&amp;gt;futex.uaddr = uaddr;
	restart-&amp;gt;futex.val = val;
	restart-&amp;gt;futex.time = *abs_time;
	restart-&amp;gt;futex.bitset = bitset;
	restart-&amp;gt;futex.flags = flags | FLAGS_HAS_TIMEOUT;

	ret = set_restart_fn(restart, futex_wait_restart);

out:
	if (to) {
		hrtimer_cancel(&amp;amp;to-&amp;gt;timer);
		destroy_hrtimer_on_stack(&amp;amp;to-&amp;gt;timer);
	}
	return ret;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;&amp;lt;kernel/futex/futex.h&amp;gt;&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct futex_q {
	struct plist_node list;

	struct task_struct *task;
	spinlock_t *lock_ptr;
	union futex_key key;
	struct futex_pi_state *pi_state;
	struct rt_mutex_waiter *rt_waiter;
	union futex_key *requeue_pi_key;
	u32 bitset;
	atomic_t requeue_state;
#ifdef CONFIG_PREEMPT_RT
	struct rcuwait requeue_wait;
#endif
} __randomize_layout;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;futex_wait is routed to &lt;em&gt;futex_wait&lt;/em&gt;() in waitwait.c. Here, we allocate a futex_q data structure. &lt;em&gt;futex_q&lt;/em&gt; is futex’s hashed queue entry defined for each waiting task. In futex_wait, the task enqueues a &lt;em&gt;futex_q&lt;/em&gt;, and when another thread calls futex_wake, dequeue an &lt;em&gt;futex_q&lt;/em&gt; entry and wakes up sleeping thread.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;lt;kernel/futex/waitwake.c&amp;gt;&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int futex_wait_setup(u32 __user *uaddr, u32 val, unsigned int flags,
		     struct futex_q *q, struct futex_hash_bucket **hb)
{
	u32 uval;
	int ret;
retry:
	ret = get_futex_key(uaddr, flags &amp;amp; FLAGS_SHARED, &amp;amp;q-&amp;gt;key, FUTEX_READ);
	if (unlikely(ret != 0))
		return ret;

retry_private:
	*hb = futex_q_lock(q);

	ret = futex_get_value_locked(&amp;amp;uval, uaddr);

	if (ret) {
		futex_q_unlock(*hb);

		ret = get_user(uval, uaddr);
		if (ret)
			return ret;

		if (!(flags &amp;amp; FLAGS_SHARED))
			goto retry_private;

		goto retry;
	}

	if (uval != val) {
		futex_q_unlock(*hb);
		ret = -EWOULDBLOCK;
	}

	return ret;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;futex_wait_setup&lt;/em&gt;() prepares to wait on the futex by generating appropriate futex key, and loading it into futex_q. Then it compares &lt;em&gt;addr&lt;/em&gt;’s value with expected value (&lt;em&gt;val&lt;/em&gt;). If returns 0 if expected value matchs, and returns 1 if doesn’t.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;lt;kernel/futex/core.c&amp;gt;&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int get_futex_key(u32 __user *uaddr, bool fshared, union futex_key *key,
		  enum futex_access rw)
{
	unsigned long address = (unsigned long)uaddr;
	struct mm_struct *mm = current-&amp;gt;mm;
	struct page *page, *tail;
	struct address_space *mapping;
	int err, ro = 0;

`	...

	if (!fshared) {
		key-&amp;gt;private.mm = mm;
		key-&amp;gt;private.address = address;
		return 0;
	}
	
    ...
    
	if (PageAnon(page)) {
		if (unlikely(should_fail_futex(true)) || ro) {
			err = -EFAULT;
			goto out;
		}

		key-&amp;gt;both.offset |= FUT_OFF_MMSHARED; /* ref taken on mm */
		key-&amp;gt;private.mm = mm;
		key-&amp;gt;private.address = address;

	} 
    
    else {
		struct inode *inode;
		
        ...

		key-&amp;gt;both.offset |= FUT_OFF_INODE; /* inode-based key */
		key-&amp;gt;shared.i_seq = get_inode_sequence_number(inode);
		key-&amp;gt;shared.pgoff = page_to_pgoff(tail);
		rcu_read_unlock();
	}

out:
	put_page(page);
	return err;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;| &lt;img src=&quot;https://github.com/wanyaworld/wanyaworld.github.io/blob/master/_posts/dvh-futexes.png&quot; alt=&quot;futex hash table&quot; /&gt; |
| :–: |
| futex hash table |&lt;/p&gt;

&lt;p&gt;There are three cases by which futex key is generated.&lt;/p&gt;

&lt;p&gt;First, if futex is private futex (futex is shared among only threads in same process), it is enough to use virtual address of the futex variable (&lt;em&gt;uaddr&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Second, if (global) futex variable is on anon-page, since addr is not enough to uniquely identify futex, we use curren thread’s &lt;em&gt;mm_struct&lt;/em&gt; and &lt;em&gt;addr&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Lastly, if (global) futex variable is file-backed, we use inode number and page offset.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;lt;kernel/futex/core.c&amp;gt;&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct futex_hash_bucket *futex_q_lock(struct futex_q *q)
	__acquires(&amp;amp;hb-&amp;gt;lock)
{
	struct futex_hash_bucket *hb;

	hb = futex_hash(&amp;amp;q-&amp;gt;key);

	futex_hb_waiters_inc(hb);

	q-&amp;gt;lock_ptr = &amp;amp;hb-&amp;gt;lock;

	spin_lock(&amp;amp;hb-&amp;gt;lock);
	return hb;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;futex_q_lock&lt;/em&gt;() increases corresponding hash bucket’s waiter counter and acquires hash bucket’s spin lock. It increses counter before acquiring hash bucket lock.&lt;/p&gt;

&lt;p&gt;The change of order might cause wake to miss a waiter waiting for the hash bucket lock, because waker firstly checks the hash bucket’s wainter count and if it is zero, does not perform any wake-ups.&lt;/p&gt;

&lt;p&gt;Back to futex_wait, if futex_wait_setup returns non-zero value, meaning futex variable equals the expected value and there’s no need to sleep, it goes to out and returns and control is switched to user-space.&lt;/p&gt;

&lt;p&gt;If not, it enqueues its &lt;em&gt;futex_q&lt;/em&gt; and sleeps.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;lt;kernel/futex/waitwake.c&amp;gt;&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void futex_wait_queue(struct futex_hash_bucket *hb, struct futex_q *q,
			    struct hrtimer_sleeper *timeout)
{
	set_current_state(TASK_INTERRUPTIBLE);
	futex_queue(q, hb);

	...

	if (likely(!plist_node_empty(&amp;amp;q-&amp;gt;list))) {
		if (!timeout || timeout-&amp;gt;task)
			freezable_schedule();
	}
	__set_current_state(TASK_RUNNING);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Before sleeping it changes the threads’ scheduling status to &lt;em&gt;TASK_INTERRUPTIBLE&lt;/em&gt; (although the process state does not change before it calls &lt;em&gt;schedule&lt;/em&gt;()) , then enqueues &lt;em&gt;futex_q&lt;/em&gt; in &lt;em&gt;futex_queue&lt;/em&gt;(), then &lt;em&gt;schedules&lt;/em&gt;().&lt;/p&gt;</content><author><name></name></author><summary type="html">Futex in Kernel Implementation (1) - futex_wait This article demonstrates kernel implementation of futex.</summary></entry><entry><title type="html">Introduction to Futex</title><link href="/2021/07/13/futex.html" rel="alternate" type="text/html" title="Introduction to Futex" /><published>2021-07-13T00:00:00+09:00</published><updated>2021-07-13T00:00:00+09:00</updated><id>/2021/07/13/futex</id><content type="html" xml:base="/2021/07/13/futex.html">&lt;h2 id=&quot;introduction-to-futex&quot;&gt;Introduction to Futex”&lt;/h2&gt;

&lt;p&gt;Futex is abbreivation of Fast Userspace muTEX.&lt;/p&gt;

&lt;p&gt;It is a linux system call but it’s wrapper is not shipped in libc implementations. (AFIAK)&lt;/p&gt;

&lt;p&gt;Therefore, to call futex you might define your own wrapper like …&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int futex(int* uaddr, int futex_op, int val, const struct timespec* timeout,
		int* uaddr2, int val3) {
	return syscall(SYS_futex, uaddr, futex_op, val, timeout, uaddr2, val3);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;uaddr&lt;/em&gt; is the address of a variable that you want to use as watchpoint.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;uaddr&lt;/em&gt; needs to be 4-bytes aligned.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;futex_op&lt;/em&gt; is the operation you want to perform, two major operation is FUTEX_WAIT and FUTEX_WAKE.&lt;/p&gt;

&lt;p&gt;FUTEX_WAIT is used when you want to sleep until the value &lt;em&gt;uaddr&lt;/em&gt; points to holds &lt;em&gt;val&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If not, futex() returns immediately.&lt;/p&gt;

&lt;p&gt;FUTEX_WAKE is used to wake up threads sleeping on the futex with &lt;em&gt;uaddr&lt;/em&gt; pointers.&lt;/p&gt;

&lt;p&gt;It wakes &lt;em&gt;val&lt;/em&gt; number of threads and returns the number of actually woken up.&lt;/p&gt;

&lt;p&gt;futex is used in userspace blocking synchronization.&lt;/p&gt;

&lt;p&gt;For example, pthreads mutex and conditional variable is implemented using futex.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void FutexLock::lock() {
	for (int i = 0 ; i &amp;lt; N_BACKOFF ; i++) {
		if (0 == __sync_val_compare_and_swap(&amp;amp;lock_var, 0, 1))
			return;
	}

	while (1) {
		int futex_ret = futex(&amp;amp;lock_var, FUTEX_WAIT, 1, NULL, NULL, 0);
		if (futex_ret == 0 &amp;amp;&amp;amp; lock_var != 0) { /* spurious wake-up */
			continue;
		}
		int CAS_ret = __sync_val_compare_and_swap(&amp;amp;lock_var, 0, 1);
		if (CAS_ret == 0)
			return;
		else
			continue;
	}
}

void FutexLock::unlock() {
	__sync_val_compare_and_swap(&amp;amp;lock_var, 1, 0);
	futex(&amp;amp;lock_var, FUTEX_WAKE, 1, NULL, NULL, 0);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Above are naive implementation of user space blocking synchronization.&lt;/p&gt;

&lt;p&gt;In lock phase, thread try to acquire the lock using hardware atomic operation (compare and swap).&lt;/p&gt;

&lt;p&gt;If it succeedes, it acquires the lock and goes to the critical section.&lt;/p&gt;

&lt;p&gt;If not, it call futex with FUTEX_WAIT operation flag, and sleeps until the value &lt;em&gt;uaddr&lt;/em&gt; points to equals to &lt;em&gt;val&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The lock releaser, on the other hand, calls futex with FUTEX_WAKE operation flag.&lt;/p&gt;

&lt;p&gt;In this implementation, releaser wakes a single thread.&lt;/p&gt;

&lt;p&gt;But the number of threads releaser wakes up can vary.&lt;/p&gt;

&lt;p&gt;Even the lock acquirer is woken up, it tries atomic operation again to prevent &lt;em&gt;supurious wakeup&lt;/em&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">Introduction to Futex”</summary></entry></feed>